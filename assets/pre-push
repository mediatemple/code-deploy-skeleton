#!/bin/bash
AWS="/usr/local/bin/aws"
AWK="/usr/bin/awk"
HEAD="/usr/bin/head"

BUCKET_NAME=$(git config --get codedeploy.s3bucket)
SOURCE_DIR=$(git config --get codedeploy.source)
DEPLOYMENT_PROFILE=$(git config --get codedeploy.profile)

BRANCH_NAME_MASTER=$(git config --get codedeploy.master.branch)
ISACTIVE_MASTER=$(git config --get codedeploy.master.active)
APPLICATION_NAME_MASTER=$(git config --get codedeploy.master.application-name)
DEPLOYMENT_GROUP_MASTER=$(git config --get codedeploy.master.deployment-group)
DISABLE_ASG_MASTER=$(git config --get codedeploy.master.disable-scaling)
ASG_MASTER=$(git config --get codedeploy.master.asg-name)

BRANCH_NAME_QA=$(git config --get codedeploy.qa.branch)
ISACTIVE_QA=$(git config --get codedeploy.qa.active)
APPLICATION_NAME_QA=$(git config --get codedeploy.qa.application-name)
DEPLOYMENT_GROUP_QA=$(git config --get codedeploy.qa.deployment-group)
DISABLE_ASG_QA=$(git config --get codedeploy.qa.disable-scaling)
ASG_QA=$(git config --get codedeploy.qa.asg-name)

policy='[Policy] Never force push or delete the '${BRANCH_NAME_MASTER}' branch! (Prevented with pre-push hook.)'

current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

BUNDLE_NAME=$(echo $(basename `pwd`)-${current_branch}.zip)

push_command=$(ps -ocommand= -p $PPID)

is_destructive='force|delete|\-f'

will_remove_master_branch=':'${BRANCH_NAME_MASTER}

do_resume_asg(){

  ASG_NAME="${1}"

  RESUME_RESULT=$(${AWS} deploy get-deployment --profile ${DEPLOYMENT_PROFILE} \
      --deployment-id ${DEPLOYMENT_RESULT} \
      --output text | ${AWK} '{ print $10 }' | ${HEAD} -n 1)

  if [[ $RESUME_RESULT = "Succeeded" ]] || [[ $RESUME_RESULT = "Failed" ]] || [[ $RESUME_RESULT = "Stopped" ]]; then

    echo "**** RE-ENABLING AUTO-SCALING: Mode=${RUN_MODE}.. Final Deploy Status=${RESUME_RESULT} **** ASG=${ASG_NAME}" 1>&2
    aws autoscaling resume-processes --profile ${DEPLOYMENT_PROFILE} \
      --auto-scaling-group-name "${ASG_NAME}"

  else

    echo "Deployment still running.. Mode=${RUN_MODE} - (Sleeping 30).." 1>&2
    sleep 30

    do_resume_asg $ASG_NAME

  fi

}

do_suspend_asg(){

  ASG_NAME="${1}"

  echo "**** DISABLING AUTO-SCALING: Mode=${RUN_MODE} **** ASG=${ASG_NAME}" 1>&2
  aws autoscaling suspend-processes --profile ${DEPLOYMENT_PROFILE} \
    --auto-scaling-group-name "${ASG_NAME}"

}

do_exit(){
  echo $policy
  exit 1
}

do_push() {

  # Call `aws deploy push` to create a new revision of the current repo
  echo "Pushing ${BUNDLE_NAME} in Mode=${RUN_MODE} to s3://${BUCKET_NAME} and registering with application '${APPLICATION_NAME_RUN}'" 1>&2
  ${AWS} deploy push --profile ${DEPLOYMENT_PROFILE} \
    --application-name ${APPLICATION_NAME_RUN} \
    --s3-location s3://${BUCKET_NAME}/${BUNDLE_NAME} \
    --ignore-hidden-files \
    --source ${SOURCE_DIR}

  revision_json="{\"revisionType\":\"S3\",\"s3Location\":{\"bucket\":\"${BUCKET_NAME}\",\"bundleType\":\"zip\",\"key\":\"${BUNDLE_NAME}\"}}"

  if [ $? != 0 ]; then
      echo "Push to codedeploy failed; skipping create-deployment" 1>&2
  else

      if [[ $DISABLE_ASG_MASTER = 1 && $current_branch = ${BRANCH_NAME_MASTER} ]]; then
          do_suspend_asg $ASG_MASTER
      fi

      if [[ $DISABLE_ASG_QA = 1 && $current_branch = ${BRANCH_NAME_QA} ]]; then
          do_suspend_asg $ASG_QA
      fi

      echo "Deploying s3://${BUCKET_NAME}/${BUNDLE_NAME} to application ${APPLICATION_NAME_RUN}, Mode=${RUN_MODE} and deployment group ${DEPLOYMENT_GROUP_RUN}" 1>&2

      DEPLOYMENT_RESULT=$(${AWS} deploy create-deployment --profile ${DEPLOYMENT_PROFILE} \
          --application-name ${APPLICATION_NAME_RUN} \
          --deployment-group-name ${DEPLOYMENT_GROUP_RUN} \
          --revision $revision_json \
          --output text)

      echo "Deployment ID=${DEPLOYMENT_RESULT}" 1>&2

      sleep 3

      if [[ $DISABLE_ASG_MASTER = 1 && $current_branch = ${BRANCH_NAME_MASTER} ]]; then
          do_resume_asg $ASG_MASTER
      fi

      if [[ $DISABLE_ASG_QA = 1 && $current_branch = ${BRANCH_NAME_QA} ]]; then
          do_resume_asg $ASG_QA
      fi

  fi

  exit 0

}

echo "Push detected, current branch: ${current_branch}"
echo "Mapped branches: (Master) ${BRANCH_NAME_MASTER}, (QA) ${BRANCH_NAME_QA}"

if [[ $ISACTIVE_MASTER != 1 && $current_branch = ${BRANCH_NAME_MASTER} ]]; then
  echo "Code deploy routine is not active (MASTER).. graceful skip"
  exit 0
fi

if [[ $ISACTIVE_QA != 1 && $current_branch = ${BRANCH_NAME_QA} ]]; then
  echo "Code deploy routine is not active (QA).. graceful skip"
  exit 0
fi

if [[ $push_command =~ $is_destructive ]] && [[ $current_branch = ${BRANCH_NAME_MASTER} ]]; then
  do_exit
fi

if [[ $push_command =~ $will_remove_master_branch ]]; then
  do_exit
fi

if [[ $current_branch = ${BRANCH_NAME_MASTER} ]]; then
  RUN_MODE=master
  APPLICATION_NAME_RUN=${APPLICATION_NAME_MASTER}
  DEPLOYMENT_GROUP_RUN=${DEPLOYMENT_GROUP_MASTER}
  do_push
elif [[ $current_branch = ${BRANCH_NAME_QA} ]]; then
  RUN_MODE=qa
  APPLICATION_NAME_RUN=${APPLICATION_NAME_QA}
  DEPLOYMENT_GROUP_RUN=${DEPLOYMENT_GROUP_QA}
  do_push
else
  echo "Current branch does not match a mapped branch (exiting)"
  exit 0
fi

unset do_exit

exit 0
